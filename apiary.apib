FORMAT: 1A
HOST: https://owner-api.teslamotors.com

# Tesla Model S JSON API
This is unofficial documentation of the Tesla Model S JSON API used by the iOS and Android apps. It features functionality to monitor and control the Model S remotely.

# Group Authentication

## Tokens [/oauth/token]

### Get an Access Token [POST]
Performs the login. Takes in an plain text email and password, matching the owner's login information for [https://my.teslamotors.com/user/login](https://my.teslamotors.com/user/login).

Returns a `access_token` which is passed along as a header with all future requests to authenticate the user.

You must provide the `Authorization: Bearer {access_token}` header in all other requests.

The current client ID and secret are [available here](http://pastebin.com/fX6ejAHd)

+ Attributes
    + grant_type: `password` (string) - The type of oAuth grant. Always "password"
    + client_id: `abc` (string) - The oAuth client ID
    + client_secret: `123` (string) - The oAuth client secret
    + email: `elon@teslamotors.com` (string) - The email for my.teslamotors.com
    + password: `edisonsux` (string) - The password for my.teslamotors.com

+ Response 200 (application/json)
    + Body

            {
              "access_token": "abc123",
              "token_type": "bearer",
              "expires_in": 7776000,
              "created_at": 1457385291,
              "refresh_token" : "cba321"
            }

# Group Vehicles
A logged in user can have multiple vehicles under their account. This resource is primarily responsible for listing the vehicles and the basic details about them.

## Vehicle Collection [/api/1/vehicles]

### List all Vehicles [GET]
Retrieve a list of your owned vehicles (includes vehicles not yet shipped!)

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Response 200 (application/json)

    + Body

            {
              "response": [{
                "color": null,
                "display_name": null,
                "id": 321,
                "option_codes": "MS01,RENA,TM00,DRLH,PF00,BT85,PBCW,RFPO,WT19,IBMB,IDPB,TR00,SU01,SC01,TP01,AU01,CH00,HP00,PA00,PS00,AD02,X020,X025,X001,X003,X007,X011,X013",
                "user_id": 123,
                "vehicle_id": 1234567890,
                "vin": "5YJSA1CN5CFP01657",
                "tokens": ["x", "x"],
                "state": "online"
              }],
              "count":1
            }


## State and Settings [/powpow]
These resources are read-only and determine the state of the vehicle's various sub-systems.

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.
    
## Vehicle State [/api/1/vehicles/{vehicle_id}]
This retrieves the full vehicle state.

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle
    
+ Response 200 (application/json)
 s
    + Body
    
        {
            "response":
                {
                    "id": 32864674168136999,
                    "user_id": 427999,
                    "vehicle_id": 1234567890,
                    "vin": "5YJ3E1EA5JF049999",
                    "display_name":"Test Vehicle",
                    "option_codes": "AD15,MDL3,PBSB,RENA,BT37,ID3W,RF3G,S3PB,DRLH,DV2W,W39B,APF0,COUS,BC3B,CH07,PC30,FC3P,FG31,GLFR,HL31,HM31,IL31,LTPB,MR31,FM3B,RS3H,SA3P,STCP,SC04,SU3C,T3CA,TW00,TM00,UT3P,WR00,AU3P,APH3,AF00,ZCST,MI00,CDM0",
                    "color":null,
                    "tokens":["b9ac7146ef3d9999","04cf846ff7019999"],
                    "state":"online",
                    "in_service":false,
                    "id_s":"32864674168139999",
                    "calendar_enabled":true,
                    "api_version":7,
                    "backseat_token":null,
                    "backseat_token_updated_at":null,
                    "charge_state":
                        {
                            "battery_heater_on":false,
                            "battery_level":81,
                            "battery_range":245.62,
                            "charge_current_request":48,
                            "charge_current_request_max":48,
                            "charge_enable_request":true,
                            "charge_energy_added":14.13,
                            "charge_limit_soc":90,
                            "charge_limit_soc_max":100,
                            "charge_limit_soc_min":50,
                            "charge_limit_soc_std":90,
                            "charge_miles_added_ideal":60.5,
                            "charge_miles_added_rated":60.5,
                            "charge_port_cold_weather_mode":false,
                            "charge_port_door_open":false,
                            "charge_port_latch":"Engaged",
                            "charge_rate":0.0,
                            "charge_to_max_range":false,
                            "charger_actual_current":0,
                            "charger_phases":null,
                            "charger_pilot_current":48,
                            "charger_power":0,
                            "charger_voltage":2,
                            "charging_state":"Disconnected",
                            "conn_charge_cable":"<invalid>",
                            "est_battery_range":197.44,
                            "fast_charger_brand":"<invalid>",
                            "fast_charger_present":false,
                            "fast_charger_type":"<invalid>",
                            "ideal_battery_range":245.62,
                            "managed_charging_active":false,
                            "managed_charging_start_time":null,
                            "managed_charging_user_canceled":false,
                            "max_range_charge_counter":0,
                            "minutes_to_full_charge":0,
                            "not_enough_power_to_heat":null,
                            "scheduled_charging_pending":false,
                            "scheduled_charging_start_time":null,
                            "time_to_full_charge":0.0,
                            "timestamp":1584312846650,
                            "trip_charging":false,
                            "usable_battery_level":80,
                            "user_charge_enable_request":null
                        },
                        "climate_state": {
                            "battery_heater":false,
                            "battery_heater_no_power":null,
                            "climate_keeper_mode":"off",
                            "defrost_mode":0,
                            "driver_temp_setting":21.1,
                            "fan_status":0,
                            "inside_temp":15.1,
                            "is_auto_conditioning_on":false,
                            "is_climate_on":false,
                            "is_front_defroster_on":false,
                            "is_preconditioning":false,
                            "is_rear_defroster_on":false,
                            "left_temp_direction":702,
                            "max_avail_temp":28.0,
                            "min_avail_temp":15.0,
                            "outside_temp":15.0,
                            "passenger_temp_setting":21.1,
                            "remote_heater_control_enabled":false,
                            "right_temp_direction":702,
                            "seat_heater_left":0,
                            "seat_heater_rear_center":0,
                            "seat_heater_rear_left":0,
                            "seat_heater_rear_right":0,
                            "seat_heater_right":0,
                            "side_mirror_heaters":false,
                            "timestamp":1584312846650,
                            "wiper_blade_heater":false
                        },
                        "drive_state": {
                            "gps_as_of":1584312797,
                            "heading":181,
                            "latitude":37.361999,
                            "longitude":-122.033999,
                            "native_latitude":37.361999,
                            "native_location_supported":1,
                            "native_longitude":-122.033999,
                            "native_type":"wgs",
                            "power":0,
                            "shift_state":null,
                            "speed":null,
                            "timestamp":1584312846650
                        },
                        "gui_settings": {
                            "gui_24_hour_time":false,
                            "gui_charge_rate_units":"mi/hr",
                            "gui_distance_units":"mi/hr",
                            "gui_range_display":"Rated",
                            "gui_temperature_units":"F",
                            "show_range_units":false,
                            "timestamp":1584312846650
                        },
                        "vehicle_config": {
                            "can_accept_navigation_requests":true,
                            "can_actuate_trunks":true,
                            "car_special_type":"base",
                            "car_type":"model3",
                            "charge_port_type":"US",
                            "ece_restrictions":false,
                            "eu_vehicle":false,
                            "exterior_color":"RedMulticoat",
                            "has_air_suspension":false,
                            "has_ludicrous_mode":false,
                            "key_version":2,
                            "motorized_charge_port":true,
                            "plg":false,
                            "rear_seat_heaters":1,
                            "rear_seat_type":null,
                            "rhd":false,
                            "roof_color":"Glass",
                            "seat_type":null,
                            "spoiler_type":"None",
                            "sun_roof_installed":null,
                            "third_row_seats":"<invalid>",
                            "timestamp":1584312846650,
                            "use_range_badging":true,
                            "wheel_type":"Stiletto19"
                        },
                        "vehicle_state":{
                            "api_version":7,
                            "autopark_state_v3":"ready",
                            "autopark_style":"standard",
                            "calendar_supported":true,
                            "car_version":"2020.12 4fbcc4b942a8",
                            "center_display_state":0,
                            "df":0,
                            "dr":0,
                            "fd_window":0,
                            "fp_window":0,
                            "ft":0,
                            "homelink_device_count":1,
                            "homelink_nearby":true,
                            "is_user_present":false,
                            "last_autopark_error":"no_error",
                            "locked":true,
                            "media_state":{
                                "remote_control_enabled":true
                            },
                            "notifications_supported":true,
                            "odometer":12714.913015,
                            "parsed_calendar_supported":true,
                            "pf":0,
                            "pr":0,
                            "rd_window":0,
                            "remote_start":false,
                            "remote_start_enabled":true,
                            "remote_start_supported":true,
                            "rp_window":null,
                            "rt":0,
                            "sentry_mode":false,
                            "sentry_mode_available":true,
                            "smart_summon_available":true,
                            "software_update": {
                                "download_perc":0,
                                "expected_duration_sec":2700,
                                "install_perc":1,
                                "status":"",
                                "version":""
                            },
                            "speed_limit_mode": {
                                "active":false,
                                "current_limit_mph":85.0,
                                "max_limit_mph":90,
                                "min_limit_mph":50,
                                "pin_code_set":false
                            },
                            "summon_standby_mode_enabled":false,
                            "timestamp":1584312846650,
                            "valet_mode":false,
                            "vehicle_name":"Test Vehicle"}
                        }
                    }
                }
            }
        }

## Mobile Access [GET /api/1/vehicles/{vehicle_id}/mobile_enabled]
Determines if mobile access to the vehicle is enabled.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
                "response": true
            }

## Charge State [GET /api/1/vehicles/{vehicle_id}/data_request/charge_state]
Returns the state of charge in the battery.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "charging_state": "Complete",  // "Charging", ??
                "charge_to_max_range": false,  // current std/max-range setting
                "max_range_charge_counter": 0,
                "fast_charger_present": false, // connected to Supercharger?
                "battery_range": 239.02,       // rated miles
                "est_battery_range": 155.79,   // range estimated from recent driving
                "ideal_battery_range": 275.09, // ideal miles
                "battery_level": 91,           // integer charge percentage
                "battery_current": -0.6,       // current flowing into battery
                "charge_starting_range": null,
                "charge_starting_soc": null,
                "charger_voltage": 0,          // only has value while charging
                "charger_pilot_current": 40,   // max current allowed by charger & adapter
                "charger_actual_current": 0,   // current actually being drawn
                "charger_power": 0,            // kW (rounded down) of charger
                "time_to_full_charge": null,   // valid only while charging
                "charge_rate": -1.0,           // float mi/hr charging or -1 if not charging
                "charge_port_door_open": true
              }
            }

## Climate Settings [GET /api/1/vehicles/{vehicle_id}/data_request/climate_state]
Returns the current temperature and climate control state.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "inside_temp": 17.0,          // degC inside car
                "outside_temp": 9.5,          // degC outside car or null
                "driver_temp_setting": 22.6,  // degC of driver temperature setpoint
                "passenger_temp_setting": 22.6, // degC of passenger temperature setpoint
                "is_auto_conditioning_on": false, // apparently even if on
                "is_front_defroster_on": null, // null or boolean as integer?
                "is_rear_defroster_on": false,
                "fan_status": 0               // fan speed 0-6 or null
              }
            }

## Driving and Position [GET /api/1/vehicles/{vehicle_id}/data_request/drive_state]
Returns the driving and position state of the vehicle.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "shift_state": null,          //
                "speed": null,                //
                "latitude": 33.794839,        // degrees N of equator
                "longitude": -84.401593,      // degrees W of the prime meridian
                "heading": 4,                 // integer compass heading, 0-359
                "gps_as_of": 1359863204       // Unix timestamp of GPS fix
              }
            }

## GUI Settings [GET /api/1/vehicles/{vehicle_id}/data_request/gui_settings]
Returns various information about the GUI settings of the car, such as unit format and range display.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "gui_distance_units": "mi/hr",
                "gui_temperature_units": "F",
                "gui_charge_rate_units": "mi/hr",
                "gui_24_hour_time": false,
                "gui_range_display": "Rated"
              }
            }

## Vehicle State [GET /api/1/vehicles/{vehicle_id}/data_request/vehicle_state]
Returns the vehicle's physical state, such as which doors are open.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "df": false,                  // driver's side front door open
                "dr": false,                  // driver's side rear door open
                "pf": false,                  // passenger's side front door open
                "pr": false,                  // passenger's side rear door open
                "ft": false,                  // front trunk is open
                "rt": false,                  // rear trunk is open
                "car_verson": "1.19.42",      // car firmware version
                "locked": true,               // car is locked
                "sun_roof_installed": false,  // panoramic roof is installed
                "sun_roof_state": "unknown",
                "sun_roof_percent_open": 0,   // null if not installed
                "dark_rims": false,           // gray rims installed
                "wheel_type": "Base19",       // wheel type installed
                "has_spoiler": false,         // spoiler is installed
                "roof_color": "Colored",      // "None" for panoramic roof
                "perf_config": "Base"
              }
            }

# Group Vehicle Commands
These commands alter the vehicles state, and return result (true/false) to indicate success, and if failure reason contains the cause of failure.

## Wake Up Car [POST /api/1/vehicles/{vehicle_id}/wake_up]
Wakes up the car from the sleep state. Necessary to get some data from the car.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Set Valet Mode [POST /api/1/vehicles/{vehicle_id}/command/set_valet_mode]
Sets valet mode on or off with a PIN to disable it from within the car. Reuses last PIN from previous valet session.
Valet Mode limits the car's top speed to 70MPH and 80kW of acceleration power. It also disables Homelink, Bluetooth and
Wifi settings, and the ability to disable mobile access to the car. It also hides your favorites, home, and work
locations in navigation.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.
    + on: true (boolean) - Whether to enable or disable valet mode.
    + password: 1234 (number) - (optional) A 4 digit PIN code to unlock the car.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Reset Valet PIN [POST /api/1/vehicles/{vehicle_id}/command/reset_valet_pin]
Resets the PIN set for valet mode, if set.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Open Charge Port [POST /api/1/vehicles/{vehicle_id}/command/charge_port_door_open]
Opens the charge port. Does not close the charge port (for now...)

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Set Charge Limit to Standard [POST /api/1/vehicles/{vehicle_id}/command/charge_standard]
Set the charge mode to standard (90% under the new percentage system introduced in 4.5).

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": false,
                "reason": "already_standard"
              }
            }

## Set Charge Limit to Max Range [POST /api/1/vehicles/{vehicle_id}/command/charge_max_range]
Set the charge mode to max range (100% under the new percentage system introduced in 4.5). Use sparingly!

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": false,
                "reason": "already_max_range"
              }
            }

## Set Charge Limit [POST /api/1/vehicles/{vehicle_id}/command/set_charge_limit?percent={limit_value}]
Set the charge limit to a custom percentage.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.
    + limit_value: `75` (number) - The percentage value

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Start Charging [POST /api/1/vehicles/{vehicle_id}/command/charge_start]
Start charging. Must be plugged in, have power available, and not have reached your charge limit.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": "" // "already_started" if a charge is in progress
              }
            }

## Stop Charging [POST /api/1/vehicles/{vehicle_id}/command/charge_stop]
Stop charging. Must already be charging.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": "" // "not_charging" if a charge was not in progress
              }
            }

## Flash Lights [POST /api/1/vehicles/{vehicle_id}/command/flash_lights]
Flash the lights once.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Honk Horn [POST /api/1/vehicles/{vehicle_id}/command/honk_horn]
Honk the horn once.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Unlock Doors [POST /api/1/vehicles/{vehicle_id}/command/door_unlock]
Unlock the car's doors.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Lock Doors [POST /api/1/vehicles/{vehicle_id}/command/door_lock]
Lock the car's doors.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Set Temperature [POST /api/1/vehicles/{vehicle_id}/command/set_temps?driver_temp={driver_degC}&passenger_temp={pass_degC}]
Set the temperature target for the HVAC system.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.
    + driver_degC: `23.7` (number) - The desired temperature on the driver's side in celcius.
    + pass_degC: `18.1` (number) - The desired temperature on the passenger's side in celcius.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Start HVAC System [POST /api/1/vehicles/{vehicle_id}/command/auto_conditioning_start]
Start the climate control system. Will cool or heat automatically, depending on set temperature.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Stop HVAC System  [POST /api/1/vehicles/{vehicle_id}/command/auto_conditioning_stop]
Stop the climate control system.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Move Pano Roof [POST /api/1/vehicles/{vehicle_id}/command/sun_roof_control?state={state}&percent={percent}]
Controls the car's panoramic roof, if installed.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.
    + state: `open` (enum[string])
        The desired state of the panoramic roof. The approximate percent open values for each state are `open` = 100%, `close` = 0%, `comfort` = 80%, and `vent` = ~15%
        + Members
            + `open` - Open the roof fully
            + `close` - Close the roof completely
            + `comfort` - Open to the comfort (80%) setting
            + `vent` - Open the roof to the vent (~15%) setting
            + `move` - Indicates you will provide a percentage to move the roof.
    + percent: `50` (number, optional) - The percentage to move the roof to.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Remote Start [POST /api/1/vehicles/{vehicle_id}/command/remote_start_drive?password={password}]
Start the car for keyless driving. Must start driving within 2 minutes of issuing this request.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.
    + password: `edisonsux` (string) - The password to the authenticated my.teslamotors.com account.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }

## Open Trunk/Frunk [POST /api/1/vehicles/{vehicle_id}/command/trunk_open]
Open the trunk or frunk. Currently inoperable.

+ Request
    + Headers

            Authorization: Bearer {access_token}

+ Parameters

    + vehicle_id: `1` (number) - The id of the Vehicle.
    + which_trunk: `rear` (string) - The trunk to open. `rear` is the only one known currently.

+ Response 200 (application/json)

    + Body

            {
              "response": {
                "result": true,
                "reason": ""
              }
            }